# -*- coding: utf-8 -*-
"""wgs-Preprocessing to Quantification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sTp4BGIEvH6EGkrc7IVK1CP0Fp0oeyFW
"""

install.packages("")

#Loading required packages----
install.packages("R.utils")
library(R.utils)

if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")

# Install Rsubread using BiocManager
BiocManager::install("Rsubread")

# BiocManager::install("Rsubread")
library(Rsubread)

# Install and load data.table package
install.packages("data.table")

library(data.table)

"""# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
BiocManager::install("RUVSeq")
library(RUVSeq)
"""

# Try installing RUVSeq using BiocManager first (recommended)
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("RUVSeq")
 # Load the package
library(RUVSeq)

# if (!require("BiocManager", quietly = TRUE))
   install.packages("BiocManager")

BiocManager::install("DESeq2")
library(DESeq2)

# if (!requireNamespace('BiocManager', quietly = TRUE))
#   install.packages('BiocManager')
#
BiocManager::install('EnhancedVolcano')
library(EnhancedVolcano)

install.packages("pheatmap")

#install.packages("pheatmap")
library(pheatmap)

#install.packages("RColorBrewer")
library(RColorBrewer)

#install.packages("ggplot2")
library(ggplot2)

read.csv <- "/content/GSE149614_HCC.metadata.updated.csv"

# Downloading FASTQ files for ERR12268342
url <- "ftp://ftp.sra.ebi.ac.uk/vol1/run/ERR122/ERR12268342/2018_AM_1_S77_R1.fastq.gz"
destination <- "ERR12268342_1.fastq.gz"
download.file(url, destination)

url <- "ftp://ftp.sra.ebi.ac.uk/vol1/run/ERR122/ERR12268342/2018_AM_1_S77_R2.fastq.gz"
destination <- "ERR12268342_2.fastq.gz"
download.file(url, destination)

#Downloading FASTQ files for ERR12268341
url <- "ftp://ftp.sra.ebi.ac.uk/vol1/run/ERR122/ERR12268341/2018_AM-7_S64_R1_001.fastq.gz"
destination <- "ERR12268341_1.fastq.gz"
download.file(url, destination)

url <- "ftp://ftp.sra.ebi.ac.uk/vol1/run/ERR122/ERR12268341/2018_AM-7_S64_R2_001.fastq.gz"
destination <- "ERR12268341_2.fastq.gz"
download.file(url, destination)

# Downloading Genome file ----
url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/195/955/GCF_000195955.2_ASM19595v2/GCF_000195955.2_ASM19595v2_genomic.fna.gz"
destination <- "Mycobacterium_tuberculosis_H37Rv_genome.fna.gz"
download.file(url, destination)

# Unzipping genome file
R.utils::gunzip(destination, overwrite = TRUE)

# Downloading Annotation file ----
url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/195/955/GCF_000195955.2_ASM19595v2/GCF_000195955.2_ASM19595v2_genomic.gff.gz"
destination <- "Mycobacterium_tuberculosis_H37Rv_annotation.gff.gz"
download.file(url, destination)

# Unzipping annotation file
R.utils::gunzip(destination, overwrite = TRUE)

install.packages("fastqcr")

# FASTQC Installation and QC Report----
install.packages("fastqcr")
#Your system should also have JAVA installed.
#visit www.java.com for installation
library(fastqcr)
fastqc_install()

fastqc()
qc <- qc_aggregate("FASTQC/")
qc

install.packages("fastp")

# List all the FASTQ files in your working directory
fastq_files <- list.files(pattern = ".fastq.gz$")

if (!requireNamespace("ShortRead", quietly = TRUE)) {
  BiocManager::install("ShortRead")
}
library(ShortRead)

# Define Illumina universal adapter
adapter_seq <- DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCA")

fq1_41 <- readFastq("ERR12268341_1.fastq.gz")
fq2_41 <- readFastq("ERR12268341_2.fastq.gz")

trimmed_fq1_41 <- trimLRPatterns(Rpattern = adapter_seq, subject = sread(fq1_41))
trimmed_fq2_41 <- trimLRPatterns(Rpattern = adapter_seq, subject = sread(fq2_41))

non_empty_1_41 <- width(trimmed_fq1_41) > 0
non_empty_2_41 <- width(trimmed_fq2_41) > 0

fq1_41_trimmed <- fq1_41[non_empty_1_41]
fq2_41_trimmed <- fq2_41[non_empty_2_41]

writeFastq(fq1_41_trimmed, "trimmed_ERR12268341_1.fastq.gz", compress = TRUE)
writeFastq(fq2_41_trimmed, "trimmed_ERR12268341_2.fastq.gz", compress = TRUE)

# Load the trimmed reads
trimmed_fq1 <- readFastq("trimmed_ERR12268341_1.fastq.gz")
trimmed_fq2 <- readFastq("trimmed_ERR12268341_2.fastq.gz")

# Identify exact duplicate reads (based on sequence)
is_dup1 <- srduplicated(trimmed_fq1)
is_dup2 <- srduplicated(trimmed_fq2)

# Filter out duplicates
dedup_fq1 <- trimmed_fq1[!is_dup1]
dedup_fq2 <- trimmed_fq2[!is_dup2]

# Save deduplicated reads
writeFastq(dedup_fq1, "dedup_trimmed_SRR5924196_1.fastq.gz", compress = TRUE)
writeFastq(dedup_fq2, "dedup_trimmed_SRR5924196_2.fastq.gz", compress = TRUE)

# Install MultiQC via pip
# Ensure that pip is available in your environment (for Colab or system-based R)
system("pip install multiqc")

# Create a directory for MultiQC report (if not already created)
system("mkdir -p MultiQC_Report")

# Run MultiQC on the FastQC results generated in the FASTQC/ directory
system("multiqc FASTQC/ -o MultiQC_Report/")

# Check if the MultiQC report was generated
list.files("MultiQC_Report/")

# (Optional) Zip the MultiQC report to download or inspect
system("zip -r MultiQC_Report.zip MultiQC_Report/")

# List forward and reverse reads
reads1 <- sort(list.files(pattern = "_1.fastq.gz$"))
reads2 <- sort(list.files(pattern = "_2.fastq.gz$"))

# Check pairing
stopifnot(length(reads1) == length(reads2))

# Confirm pairs
data.frame(Sample = 1:length(reads1), Forward = reads1, Reverse = reads2)

library(Rsubread)

buildindex(
  basename = "mc_full_index_rsubread",
  reference = "Mycobacterium_tuberculosis_H37Rv_genome.fna",
  indexSplit = FALSE
)

#Building Index----
buildindex("mc_full_index_rsubread",
           "Mycobacterium_tuberculosis_H37Rv_genome.fna",
           indexSplit=F)

reads1 <- list.files(pattern = "trimmed_ERR12268341_1.fastq.gz$" )
reads2 <- list.files(pattern = "trimmed_ERR12268341_2.fastq.gz$" )
all.equal(length(reads1),length(reads2))

align(
  index = "mc_full_index_rsubread",
  readfile1 = "trimmed_ERR12268341_1.fastq.gz",
  readfile2 = "trimmed_ERR12268341_2.fastq.gz",
  input_format = "gzFASTQ",
  output_file = "ERR12268341_rsubread.BAM",
  nthreads = 4
)

align(
  index = "mc_full_index_rsubread",
  readfile1 = "ERR12268342_1.fastq.gz",
  readfile2 = "ERR12268342_2.fastq.gz",
  input_format = "gzFASTQ",
  output_file = "ERR12268342_rsubread.BAM",
  nthreads = 4
)

install.packages("vcfR")
install.packages("ggplot2")

library(vcfR)
library(ggplot2)

vcf <- read.vcfR("/content/ERR12268342_snps.vcf")

summary(vcf)

# View metadata
head(vcf@fix)

vcf_df <- as.data.frame(vcf@fix)
vcf_df$POS <- as.numeric(vcf_df$POS)

ggplot(vcf_df, aes(x = POS)) +
  geom_histogram(binwidth = 10000, fill = "steelblue") +
  theme_minimal() +
  labs(title = "SNP Distribution Across Genome",
       x = "Genomic Position",
       y = "SNP Count (binwidth = 10kb)")

table(vcf_df$REF, vcf_df$ALT)

"""Extract Fixed Fields (CHROM, POS, REF, ALT)

"""

vcf_df <- as.data.frame(vcf@fix)
head(vcf_df)

write.csv(vcf_df, "variant_summary.csv", row.names = FALSE)

library(dplyr)
vcf_df$POS <- as.numeric(vcf_df$POS)

vcf_df_density <- vcf_df %>%
  group_by(bin = cut(POS, breaks = seq(0, max(POS), by = 10000))) %>%
  summarise(SNP_Count = n())

vcf_df_density$bin_mid <- sapply(strsplit(as.character(vcf_df_density$bin), ","), function(x) {
  mean(as.numeric(gsub("[^0-9.]", "", x)))
})

ggplot(vcf_df_density, aes(x = bin_mid, y = SNP_Count)) +
  geom_line(color = "darkblue") +
  geom_smooth(se = FALSE, color = "red") +
  theme_minimal() +
  labs(title = "SNP Density Across Genome",
       x = "Genomic Position (binned, 10kb)", y = "SNP Count")

library(ggplot2)
variant_table <- table(vcf_df$variant_type)
df_variant <- as.data.frame(variant_table)

ggplot(df_variant, aes(x = "", y = Freq, fill = Var1)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  theme_void() +
  labs(title = "SNP Types: Transitions vs Transversions") +
  scale_fill_brewer(palette = "Set2")

Ti <- sum(vcf_df$variant_type == "Transition")
Tv <- sum(vcf_df$variant_type == "Transversion")
Ti_Tv_Ratio <- Ti / Tv
cat("Ti/Tv Ratio:", Ti_Tv_Ratio, "\n")

vcf_df$SNP_Class <- paste(vcf_df$REF, "â†’", vcf_df$ALT)

ggplot(vcf_df, aes(x = SNP_Class)) +
  geom_bar(fill = "purple") +
  theme_minimal() +
  coord_flip() +
  labs(title = "Base Substitution Patterns",
       x = "Substitution", y = "Frequency")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install(c("GenomicRanges", "rtracklayer"))

library(GenomicRanges)
library(rtracklayer)

# Load GFF file
gff <- import("/content/Mycobacterium_tuberculosis_H37Rv_annotation.gff")

# Load your VCF
library(vcfR)
vcf <- read.vcfR("/content/ERR12268342_snps.vcf")
vcf_df <- as.data.frame(vcf@fix)
vcf_df$POS <- as.numeric(vcf_df$POS)

# Convert VCF and GFF to GRanges
vcf_gr <- GRanges(seqnames = vcf_df$CHROM, ranges = IRanges(start = vcf_df$POS, width = 1))
genes_gr <- gff[gff$type == "gene"]

# Find overlaps
overlaps <- findOverlaps(vcf_gr, genes_gr)
vcf_df$gene <- NA
vcf_df$gene[queryHits(overlaps)] <- genes_gr$Name[subjectHits(overlaps)]

head(vcf_df)

"""# **Gene-wise SNP Distribution**"""

table(vcf_df$gene)

"""# **Filter for Coding Genes Only**"""

vcf_annotated <- vcf_df[!is.na(vcf_df$gene), ]

"""# **Focus on Known Antibiotic Resistance Genes**"""

subset(vcf_df, gene %in% c("rpoB", "katG", "inhA", "gyrA", "gyrB", "embB"))

library(ggplot2)
top_genes <- as.data.frame(table(vcf_df$gene))
top_genes <- top_genes[order(-top_genes$Freq), ][1:10, ]

ggplot(top_genes, aes(x = reorder(Var1, Freq), y = Freq)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top 10 Mutated Genes",
       x = "Gene", y = "Number of SNPs")

res_genes <- c("rpoB", "katG", "gyrA", "embB", "inhA", "pncA")
res_snp_df <- subset(vcf_df, gene %in% res_genes)

mutation_table <- as.data.frame(table(vcf_df$gene))
colnames(mutation_table) <- c("Gene", "Mutation_Count")
write.csv(mutation_table, "gene_mutation_summary.csv", row.names = FALSE)